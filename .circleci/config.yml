# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
version: 2
commands:
  announce_failure:
    parameters:
    steps:
      - run:
          name: Announce failure
          command: |
            scripts/master

jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/ruby:2.3.7-node-browsers
        environment:
          BUNDLER_VERSION: 2.0.1
          PG_HOST: localhost
          PG_USER: ubuntu
          RAILS_ENV: test
          RACK_ENV: test
          DATABASE_URL: "postgres://ubuntu@localhost:5432/rails_hangman_test"
      - image: circleci/postgres:9.4.12-alpine
        environment:
          POSTGRES_USER: ubuntu

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "Gemfile.lock" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
            
      - run: gem install bundler

      - run:
          name: install dependencies
          command: |
            bundle install --jobs=4 --retry=3 --path vendor/bundle
      - save_cache:
          paths:
            - ./vendor/bundle
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}

      # Database setup
      - run: bundle exec rake db:create
      - run: bundle exec rake db:schema:load

      # run tests!
      - run:
          name: run tests
          command: |
            bundle exec rspec --profile 10 \
              --format RspecJunitFormatter \
              --out /tmp/test-results/rspec.xml \
              --format progress \
              $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)
      # collect reports
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results

      # Alert the team to any failures
      - run:
          name: Announce failure
          command: |
            [[ $CIRCLE_BRANCH = alert-on-failed-builds ]] || exit 0
            bash scripts/circleci-announce-broken-branch
          when: on_fail

workflows:
  version: 2
  build:
    jobs:
      - build
  nightly:
    triggers:
      - schedule:
          cron: '0 0 * * *'
          filters:
            branches:
              only:
                - master
    jobs:
      - build